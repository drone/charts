apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "drone-runner-docker.fullname" . }}
  labels:
    {{- include "drone-runner-docker.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "drone-runner-docker.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "drone-runner-docker.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "drone-runner-docker.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.extraVolumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      shareProcessNamespace: true
      containers:
        - name: sigterm-handler
          image: 710267309417.dkr.ecr.us-east-1.amazonaws.com/docker-hub/library/docker:20.10-cli
          imagePullPolicy: Always
          command:
            - /bin/sh
          args:
            - -c
            - |
              terminate_dockerd() {
                echo "No running containers, shutting down dockerd";
                kill -SIGTERM $(pgrep dockerd);
                exit 0
              }

              poll_for_running_containers() {
                while true; do
                  running_containers=$(DOCKER_HOST=tcp://localhost:2375 docker ps -q | wc -l)
                  if [ "$running_containers" -eq 0 ]; then
                    terminate_dockerd
                  else
                    echo "Containers are still running, waiting for them to stop...";
                    sleep 5
                  fi
                done
              }

              trap 'echo "SIGTERM received, starting polling..."; poll_for_running_containers' SIGTERM;

              echo "Sidecar started, monitoring dockerd...";
              while true; do
                sleep 3600  # Keep the sidecar running
              done;

        - name: dind
          image: "{{ .Values.dind.registry }}/{{ .Values.dind.repository }}:{{ .Values.dind.tag }}"
          imagePullPolicy: {{ .Values.dind.pullPolicy }}
          command: 
          {{- range .Values.dind.command }}
            - {{ . }}
          {{- end }}
          args:
          {{- range .Values.dind.commandArgs }}
            - {{ . }}
          {{- end }}
          {{- with .Values.dind.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          livenessProbe:
            exec:
              command:
              - docker
              - -H 
              - tcp://localhost:2375
              - images
            initialDelaySeconds: 15
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
              - docker
              - -H 
              - tcp://localhost:2375
              - images
            initialDelaySeconds: 15
            periodSeconds: 5
          resources:
            limits:
              cpu: {{ .Values.class.cpu }}
              memory: {{ .Values.class.memory }}
            requests:
              cpu: {{ .Values.class.cpu }}
              memory: {{ .Values.class.memory }}
          {{- with .Values.dind.extraVolumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- if $.Values.gc.enabled }}
        - name: gc
          image: "{{ .Values.gc.registry }}/{{ .Values.gc.repository }}:{{ .Values.gc.tag }}"
          imagePullPolicy: {{ .Values.gc.pullPolicy }}
          {{- with .Values.gc.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: DOCKER_HOST
              value: {{ .Values.env.DOCKER_HOST }}
          {{- if $.Values.gc.env }}
            {{- range $key, $value := $.Values.gc.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          {{- with .Values.gc.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "drone-runner-docker.fullname" . }}
          {{- range .Values.extraSecretNamesForEnvFrom }}
            - secretRef:
                name: {{ . }}
          {{- end }}
          {{- with .Values.extraVolumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: DOCKER_HOST
              value: {{ .Values.env.DOCKER_HOST }}
            - name: DRONE_RUNNER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: tcp
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: tcp
          readinessProbe:
            tcpSocket:
              port: tcp
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: drone.io/class
                operator: In
                values:
                - {{ .Values.class.extends | default .Values.class.type }}
      tolerations:
        - key: drone.io/class
          operator: Equal
          value: {{ .Values.class.extends | default .Values.class.type }}
          effect: NoSchedule
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
